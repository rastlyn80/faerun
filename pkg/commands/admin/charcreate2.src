use uo;
use os;

include ":gumps:gumps";

var ATTRIBUTES := { "STR", "DEX", "CON", "INT", "WIS", "CHA" };
var POINT_COSTS := dictionary{ 8 -> 0, 9 -> 1, 10 -> 2, 11 -> 3, 12 -> 4, 13 -> 5, 14 -> 7, 15 -> 9 };
var MAX_POINTS := 27;
var MODIFIER_TABLE := dictionary{ 
    1 -> "-5", 2 -> "-4", 3 -> "-4", 4 -> "-3", 5 -> "-3", 6 -> "-2", 7 -> "-2", 8 -> "-1",
    9 -> "-1", 10 -> "+0", 11 -> "+0", 12 -> "+1", 13 -> "+1", 14 -> "+2", 15 -> "+2", 16 -> "+3",
    17 -> "+3", 18 -> "+4", 19 -> "+4", 20 -> "+5", 21 -> "+5", 22 -> "+6", 23 -> "+6", 24 -> "+7",
    25 -> "+7", 26 -> "+8", 27 -> "+8", 28 -> "+9", 29 -> "+9", 30 -> "10"
};

var baseValues := dictionary{};
var totalValues := dictionary{};
var raceModifiers := dictionary{};
var otherModifiers := dictionary{};
var finalModifiers := dictionary{};
var specialMessage := "";
var isComplete := false;

function initDictionaries()
    foreach attr in ATTRIBUTES
        baseValues[attr] := 0;
        totalValues[attr] := 0;
        raceModifiers[attr] := 0;
        otherModifiers[attr] := 0;
        finalModifiers[attr] := 0;
    endforeach
endfunction

function getModifier(value)
    if (MODIFIER_TABLE.exists(value))
        return MODIFIER_TABLE[value];
    else
        return "+0";
    endif
endfunction

function assignRaceModifiers(race, subrace := 0)
    raceModifiers.clear();
    foreach attr in ATTRIBUTES
        raceModifiers[attr] := 0;
    endforeach

    case (race)
         "Dragonborn":
            raceModifiers["STR"] := 2;
            raceModifiers["CHA"] := 1;
            break;
         "Dwarf":
            raceModifiers["CON"] := 2;
            if (subrace == "Hill Dwarf")
                raceModifiers["WIS"] := 1;
            elseif (subrace == "Mountain Dwarf")
                raceModifiers["STR"] := 2;
            endif
            break;
         "Elf":
            raceModifiers["DEX"] := 2;
            if (subrace == "High Elf")
                raceModifiers["INT"] := 1;
            elseif (subrace == "Wood Elf")
                raceModifiers["WIS"] := 1;
            endif
            break;
         "Gnome":
            raceModifiers["INT"] := 2;
            if (subrace == "Deep Gnome")
                raceModifiers["DEX"] := 1;
            elseif (subrace == "Rock Gnome")
                raceModifiers["CON"] := 1;
            endif
            break;
         "Half-Elf":
            raceModifiers["CHA"] := 2;
            // Additional +1 to two other attributes
            break;
         "Halfling":
            raceModifiers["DEX"] := 2;
            if (subrace == "Lightfoot Halfling")
                raceModifiers["CHA"] := 1;
            elseif (subrace == "Stout Halfling")
                raceModifiers["CON"] := 1;
            endif
            break;
         "Half-Orc":
            raceModifiers["STR"] := 2;
            raceModifiers["CON"] := 1;
            break;
         "Human":
            foreach attr in ATTRIBUTES
                raceModifiers[attr] := 1;
            endforeach
            break;
         "Tiefling":
            raceModifiers["CHA"] := 2;
            raceModifiers["INT"] := 1;
            break;
    endcase
endfunction

function distributeBaseValues(class)
    case (class)
         "Barbarian":
            baseValues := dictionary{ "STR" -> 15, "DEX" -> 14, "CON" -> 13, "INT" -> 8, "WIS" -> 12, "CHA" -> 10 };
            break;
         "Bard":
            baseValues := dictionary{ "STR" -> 8, "DEX" -> 14, "CON" -> 13, "INT" -> 10, "WIS" -> 12, "CHA" -> 15 };
            break;
         "Cleric":
            baseValues := dictionary{ "STR" -> 10, "DEX" -> 8, "CON" -> 13, "INT" -> 10, "WIS" -> 15, "CHA" -> 14 };
            break;
         "Druid":
            baseValues := dictionary{ "STR" -> 8, "DEX" -> 14, "CON" -> 13, "INT" -> 10, "WIS" -> 15, "CHA" -> 12 };
            break;
         "Fighter":
            baseValues := dictionary{ "STR" -> 15, "DEX" -> 14, "CON" -> 13, "INT" -> 8, "WIS" -> 12, "CHA" -> 10 };
            break;
         "Monk":
            baseValues := dictionary{ "STR" -> 10, "DEX" -> 15, "CON" -> 13, "INT" -> 8, "WIS" -> 14, "CHA" -> 12 };
            break;
         "Paladin":
            baseValues := dictionary{ "STR" -> 15, "DEX" -> 8, "CON" -> 13, "INT" -> 10, "WIS" -> 12, "CHA" -> 14 };
            break;
         "Ranger":
            baseValues := dictionary{ "STR" -> 8, "DEX" -> 15, "CON" -> 13, "INT" -> 10, "WIS" -> 14, "CHA" -> 12 };
            break;
         "Rogue":
            baseValues := dictionary{ "STR" -> 8, "DEX" -> 15, "CON" -> 13, "INT" -> 14, "WIS" -> 12, "CHA" -> 10 };
            break;
         "Sorcerer":
            baseValues := dictionary{ "STR" -> 8, "DEX" -> 14, "CON" -> 13, "INT" -> 10, "WIS" -> 12, "CHA" -> 15 };
            break;
         "Warlock":
            baseValues := dictionary{ "STR" -> 8, "DEX" -> 14, "CON" -> 13, "INT" -> 12, "WIS" -> 10, "CHA" -> 15 };
            break;
         "Wizard":
            baseValues := dictionary{ "STR" -> 8, "DEX" -> 14, "CON" -> 13, "INT" -> 15, "WIS" -> 12, "CHA" -> 10 };
            break;
        default:
            return;
    endcase
    recalculateTotals();
endfunction

function recalculateTotals()
    foreach attr in ATTRIBUTES
        totalValues[attr] := baseValues[attr] + raceModifiers[attr] + otherModifiers[attr];
        finalModifiers[attr] := getModifier(totalValues[attr]);
    endforeach
endfunction

function calculateRemainingPoints()
    var usedPoints := 0;
    foreach attr in ATTRIBUTES
        usedPoints += POINT_COSTS[baseValues[attr]];
    endforeach
    return MAX_POINTS - usedPoints;
endfunction

function adjustAbilityScore(stat, delta)
    var newValue := baseValues[stat] + delta;
    if (newValue >= 8 && newValue <= 15)
        var currentPoints := calculateRemainingPoints();
        var costDifference := POINT_COSTS[newValue] - POINT_COSTS[baseValues[stat]];
        if (costDifference <= currentPoints)
            baseValues[stat] := newValue;
            recalculateTotals();
        else
            specialMessage := "Not enough points to increase " + stat;
        endif
    else
        specialMessage := stat + " must be between 8 and 15.";
    endif
endfunction

function getRadioSelection(res)
    foreach key in (res.keys)
        if (key != 0)
            return key;
        endif
    endforeach
    return 0;
endfunction

function characterRaceGump(who)
    var gflayout := {
        "noclose", "nodispose", "page 0",
        "gumppic 210, 100, 11265", "gumppic 410, 100, 11264", "gumppic 1080, 100, 11265",
        "htmlgump 633 110 300 30 0 0 0",
        "resizepic 530 240 9300 429 395",
        "gumppic 1100, 130, 1634", "gumppic 230, 130, 1632",
        "text 682 165 5 1", "page 1",
        "text 686 250 36 2",
        "text 610 305 56 3", "text 610 335 56 4", "text 610 365 56 5", "text 610 395 56 6",
        "text 610 425 56 7", "text 610 455 56 8", "text 610 485 56 9", "text 610 515 56 10",
        "text 610 545 56 11",
        "resizepic 770 360 1460 150 152",
        "gumppic 790, 380, 2731",
        "button 860 600 12009 12010 1 0 1",
        "radio 580 305 210 211 1 1", "radio 580 335 210 211 0 2", "radio 580 365 210 211 0 3",
        "radio 580 395 210 211 0 4", "radio 580 425 210 211 0 5", "radio 580 455 210 211 0 6",
        "radio 580 485 210 211 0 7", "radio 580 515 210 211 0 8", "radio 580 545 210 211 0 9"
    };

    var gfdata := {
        "<BASEFONT COLOR=\"#FFFFFF\" SIZE=\"5\">WELCOME ADVENTURER",
        "CHOOSE YOUR FATE",
        "Choose your Race",
        "Dragonborn", "Dwarf", "Elf", "Gnome", "Half-Elf", "Half-Orc", "Halfling", "Human", "Tiefling"
    };

    var res := SendDialogGump(who, gflayout, gfdata);
    var race := getRadioSelection(res);

    case (race)
         1: race := "Dragonborn"; break;
         2: race := "Dwarf"; break;
         3: race := "Elf"; break;
         4: race := "Gnome"; break;
         5: race := "Half-Elf"; break;
         6: race := "Half-Orc"; break;
         7: race := "Halfling"; break;
         8: race := "Human"; break;
         9: race := "Tiefling"; break;
        default: race := "";
    endcase

    if (res[0] == 1)
        SetObjProperty(who, "race", race);
        if (race == "Dragonborn")
            characterDraconicGump(who);
        elseif (race == "Dwarf")
            characterDwarfGump(who);
        elseif (race == "Elf")
            characterElfGump(who);
        elseif (race == "Gnome")
            characterGnomeGump(who);
        elseif (race == "Halfling")
            characterHalflingGump(who);
        else
            assignRaceModifiers(race);
            SetObjProperty(who, "race_mods", raceModifiers);
            SetObjProperty(who, "other_mods", otherModifiers);
            characterClassGump(who);
        endif
    endif

    return res;
endfunction

function characterDraconicGump(who)
    // Similar to characterRaceGump but for selecting Draconic Ancestry
endfunction

function characterDwarfGump(who)
    // Similar to characterRaceGump but for selecting Dwarf subrace
endfunction

function characterElfGump(who)
    // Similar to characterRaceGump but for selecting Elf subrace
endfunction

function characterGnomeGump(who)
    // Similar to characterRaceGump but for selecting Gnome subrace
endfunction

function characterHalflingGump(who)
    // Similar to characterRaceGump but for selecting Halfling subrace
endfunction

function characterClassGump(who)
    var gflayout := {
        "noclose", "nodispose", "page 0",
        "gumppic 210, 100, 11265", "gumppic 410, 100, 11264", "gumppic 1080, 100, 11265",
        "htmlgump 633 110 300 30 0 0 0",
        "resizepic 530 240 9300 429 395",
        "gumppic 1100, 130, 1634", "gumppic 230, 130, 1632",
        "text 682 165 5 1", "page 1",
        "text 686 250 36 2",
        "text 610 270 56 3", "text 610 300 56 4", "text 610 330 56 5", "text 610 360 56 6",
        "text 610 390 56 7", "text 610 420 56 8", "text 610 450 56 9", "text 610 480 56 10",
        "text 610 510 56 11", "text 610 540 56 12", "text 610 570 56 13",
        "resizepic 770 360 1460 150 152", "gumppic 790, 380, 2744",
        "button 860 600 12009 12010 1 0 2", "button 760 600 12015 12016 1 0 1",
        "radio 580 270 210 211 1 1", "radio 580 300 210 211 0 2", "radio 580 330 210 211 0 3",
        "radio 580 360 210 211 0 4", "radio 580 390 210 211 0 5", "radio 580 420 210 211 0 6",
        "radio 580 450 210 211 0 7", "radio 580 480 210 211 0 8", "radio 580 510 210 211 0 9",
        "radio 580 540 210 211 0 10", "radio 580 570 210 211 0 11", "radio 580 600 210 211 0 12"
    };

    var gfdata := {
        "<BASEFONT COLOR=\"#FFFFFF\" SIZE=\"5\">WELCOME ADVENTURER",
        "CHOOSE YOUR FATE",
        "Choose your Class",
        "Barbarian", "Bard", "Cleric", "Druid", "Fighter", "Monk", "Paladin",
        "Ranger", "Rogue", "Sorcerer", "Warlock", "Wizard"
    };

    var res := SendDialogGump(who, gflayout, gfdata);
    var class := getRadioSelection(res);

    case (class)
         1: class := "Barbarian"; break;
         2: class := "Bard"; break;
         3: class := "Cleric"; break;
         4: class := "Druid"; break;
         5: class := "Fighter"; break;
         6: class := "Monk"; break;
         7: class := "Paladin"; break;
         8: class := "Ranger"; break;
         9: class := "Rogue"; break;
         10: class := "Sorcerer"; break;
         11: class := "Warlock"; break;
         12: class := "Wizard"; break;
        default: class := "";
    endcase

    if (res[0] == 1)
        characterRaceGump(who);
    else
        SetObjProperty(who, "class", class);
        distributeBaseValues(class);
        characterAbilitiesGump(who);
    endif

    return res;
endfunction

function characterAbilitiesGump(who)
    recalculateTotals();

    var gflayout := {
        "noclose", "nodispose", "page 0",
        "gumppic 210, 100, 11265", "gumppic 410, 100, 11264", "gumppic 1080, 100, 11265",
        "htmlgump 633 110 300 30 0 0 0",
        "resizepic 530 240 9300 429 395",
        "gumppic 1100, 130, 1634", "gumppic 230, 130, 1632",
        "text 682 165 5 1", "page 1",
        "text 686 250 36 2", "text 560 280 56 3", "text 628 280 56 4", "text 696 280 56 5",
        "text 764 280 56 6", "text 832 280 56 7", "text 900 280 56 8",
        "text 560 300 928 9", "text 628 300 928 9", "text 696 300 928 9", "text 764 300 928 9",
        "text 832 300 928 9", "text 900 300 928 9",
        "text 568 320 41 10", "text 636 320 41 11", "text 704 320 41 12", "text 772 320 41 13",
        "text 840 320 41 14", "text 908 320 41 15",
        "button 550 345 9910 9911 1 0 7", "button 578 345 9904 9905 1 0 9", "button 620 345 9910 9911 1 0 14",
        "button 646 345 9904 9905 1 0 18", "button 685 345 9910 9911 1 0 21", "button 713 345 9904 9905 1 0 27",
        "button 752 345 9910 9911 1 0 28", "button 780 345 9904 9905 1 0 36", "button 820 345 9910 9911 1 0 35",
        "button 848 345 9904 9905 1 0 45", "button 890 345 9910 9911 1 0 42", "button 918 345 9904 9905 1 0 54",
        "text 570 370 928 16", "text 638 370 928 16", "text 706 370 928 16", "text 774 370 928 16", 
        "text 842 370 928 16", "text 910 370 928 16", "text 560 387 130 17", "text 628 387 130 17", 
        "text 696 387 130 17", "text 764 387 130 17", "text 832 387 130 17", "text 900 387 130 17",
        "text 570 410 41 18", "text 638 410 41 19", "text 706 410 41 20", "text 774 410 41 21", 
        "text 842 410 41 22", "text 910 410 41 23", "text 570 430 928 16", "text 638 430 928 16",
        "text 706 430 928 16", "text 774 430 928 16", "text 842 430 928 16", "text 910 430 928 16",
        "text 560 450 130 24", "text 628 450 130 24", "text 696 450 130 24", "text 764 450 130 24",
        "text 832 450 130 24", "text 900 450 130 24", "text 570 470 41 25", "text 638 470 41 26",
        "text 706 470 41 27", "text 774 470 41 28", "text 842 470 41 29", "text 910 470 41 30",
        "text 570 490 928 31", "text 638 490 928 31", "text 706 490 928 31", "text 774 490 928 31",
        "text 842 490 928 31", "text 910 490 928 31", "text 560 510 130 32", "text 628 510 130 32", 
        "text 696 510 130 32", "text 764 510 130 32", "text 832 510 130 32", "text 900 510 130 32",
        "text 570 530 41 33", "text 638 530 41 34", "text 706 530 41 35", "text 774 530 41 36",
        "text 842 530 41 37", "text 910 530 41 38", "text 560 550 130 39", "text 628 550 130 39",
        "text 696 550 130 39", "text 764 550 130 39", "text 832 550 130 39", "text 900 550 130 39",
        "text 570 570 41 40", "text 638 570 41 41", "text 706 570 41 42", "text 774 570 41 43",
        "text 842 570 41 44", "text 910 570 41 45", "text 700 680 56 46", "text 650 710 130 47",
        "button 860 600 12009 12010 1 0 2", "button 760 600 12015 12016 1 0 1"
    };

    var gfdata := {
        "<BASEFONT COLOR=\"#FFFFFF\" SIZE=\"5\">WELCOME ADVENTURER",
        "CHOOSE YOUR FATE", "Choose your Abilities", "STR", "DEX", "CON", "INT", "WIS", "CHA",
        "base", baseValues["STR"], baseValues["DEX"], baseValues["CON"], baseValues["INT"],
        baseValues["WIS"], baseValues["CHA"], "+", "race", raceModifiers["STR"], raceModifiers["DEX"],
        raceModifiers["CON"], raceModifiers["INT"], raceModifiers["WIS"], raceModifiers["CHA"], "other",
        otherModifiers["STR"], otherModifiers["DEX"], otherModifiers["CON"], otherModifiers["INT"],
        otherModifiers["WIS"], otherModifiers["CHA"], "=", "total", totalValues["STR"], totalValues["DEX"],
        totalValues["CON"], totalValues["INT"], totalValues["WIS"], totalValues["CHA"], "mod",
        finalModifiers["STR"], finalModifiers["DEX"], finalModifiers["CON"], finalModifiers["INT"],
        finalModifiers["WIS"], finalModifiers["CHA"], "Remaining points: " + calculateRemainingPoints(),
        specialMessage
    };

    var res := SendDialogGump(who, gflayout, gfdata);

    case (res[0])
         1:
            characterClassGump(who);
            break;
         2:
            isComplete := true;
            SetObjProperty(who, "abilities", baseValues);
            SetObjProperty(who, "race_mods", raceModifiers);
            break;
         7:  14:  21:  28:  35:  42:
            adjustAbilityScore(ATTRIBUTES[(res[0] / 7) - 1], -1);
            break;
         9:  18:  27:  36:  45:  54:
            adjustAbilityScore(ATTRIBUTES[(res[0] / 9) - 1], 1);
            break;
        default:
            break;
    endcase
endfunction

function characterAlignmentGump(who)
    var gflayout := {
        "noclose", "nodispose", "page 0",
        "gumppic 210, 100, 11265", "gumppic 410, 100, 11264", "gumppic 1080, 100, 11265",
        "htmlgump 633 110 300 30 0 0 0",
        "resizepic 530 240 9300 429 395",
        "gumppic 1100, 130, 1634", "gumppic 230, 130, 1632",
        "text 682 165 5 1", "page 1",
        "text 686 250 36 2",
        "text 610 305 56 3", "text 610 335 56 4", "text 610 365 56 5", "text 610 395 56 6",
        "text 610 425 56 7", "text 610 455 56 8", "text 610 485 56 9", "text 610 515 56 10",
        "text 610 545 56 11",
        "resizepic 770 360 1460 150 152",
        "gumppic 790, 380, 2731",
        "button 860 600 12009 12010 1 0 2", "button 760 600 12015 12016 1 0 1",
        "radio 580 305 210 211 1 1", "radio 580 335 210 211 0 2", "radio 580 365 210 211 0 3",
        "radio 580 395 210 211 0 4", "radio 580 425 210 211 0 5", "radio 580 455 210 211 0 6",
        "radio 580 485 210 211 0 7", "radio 580 515 210 211 0 8", "radio 580 545 210 211 0 9"
    };

    var gfdata := {
        "<BASEFONT COLOR=\"#FFFFFF\" SIZE=\"5\">WELCOME ADVENTURER",
        "CHOOSE YOUR FATE",
        "Choose your Alignment",
        "Chaotic Evil", "Chaotic Neutral", "Chaotic Good", "Neutral Evil", "Neutral", "Neutral Good",
        "Lawful Evil", "Lawful Neutral", "Lawful Good"
    };

    var res := SendDialogGump(who, gflayout, gfdata);
    var alignment := getRadioSelection(res);

    case (alignment)
         1: alignment := "Chaotic Evil"; break;
         2: alignment := "Chaotic Neutral"; break;
         3: alignment := "Chaotic Good"; break;
         4: alignment := "Neutral Evil"; break;
         5: alignment := "Neutral"; break;
         6: alignment := "Neutral Good"; break;
         7: alignment := "Lawful Evil"; break;
         8: alignment := "Lawful Neutral"; break;
         9: alignment := "Lawful Good"; break;
        default: alignment := "";
    endcase

    if (res[0] == 2)
        SetObjProperty(who, "alignment", alignment);
        characterBackgroundGump(who);
    else
        isComplete := false;
    endif

    return res;
endfunction

function characterBackgroundGump(who)
    var gflayout := {
        "noclose", "nodispose", "page 0",
        "gumppic 210, 100, 11265", "gumppic 410, 100, 11264", "gumppic 1080, 100, 11265",
        "htmlgump 633 110 300 30 0 0 0",
        "resizepic 530 240 9300 429 395",
        "gumppic 1100, 130, 1634", "gumppic 230, 130, 1632",
        "text 682 165 5 1", "page 1",
        "text 686 250 36 2",
        "text 610 270 56 3", "text 610 297 56 4", "text 610 324 56 5", "text 610 351 56 6",
        "text 610 378 56 7", "text 610 405 56 8", "text 610 432 56 9", "text 610 459 56 10",
        "text 610 486 56 11", "text 610 513 56 12", "text 610 540 56 13", "text 610 567 56 14",
        "text 610 594 56 15",
        "resizepic 770 360 1460 150 152", "gumppic 790, 380, 2744",
        "button 860 600 12009 12010 1 0 2", "button 760 600 12015 12016 1 0 1",
        "radio 580 270 210 211 1 1", "radio 580 297 210 211 0 2", "radio 580 324 210 211 0 3",
        "radio 580 351 210 211 0 4", "radio 580 378 210 211 0 5", "radio 580 405 210 211 0 6",
        "radio 580 432 210 211 0 7", "radio 580 459 210 211 0 8", "radio 580 486 210 211 0 9",
        "radio 580 513 210 211 0 10", "radio 580 540 210 211 0 11", "radio 580 567 210 211 0 12",
        "radio 580 594 210 211 0 13"
    };

    var gfdata := {
        "<BASEFONT COLOR=\"#FFFFFF\" SIZE=\"5\">WELCOME ADVENTURER",
        "CHOOSE YOUR FATE",
        "Choose your Background",
        "Acolyte", "Charlatan", "Criminal", "Entertainer", "Folk Hero", "Guild Artisan", "Hermit",
        "Noble", "Outlander", "Sage", "Sailor", "Soldier", "Urchin"
    };

    var res := SendDialogGump(who, gflayout, gfdata);
    var background := getRadioSelection(res);

    case (background)
         1: background := "Acolyte"; break;
         2: background := "Charlatan"; break;
         3: background := "Criminal"; break;
         4: background := "Entertainer"; break;
         5: background := "Folk Hero"; break;
         6: background := "Guild Artisan"; break;
         7: background := "Hermit"; break;
         8: background := "Noble"; break;
         9: background := "Outlander"; break;
         10: background := "Sage"; break;
         11: background := "Sailor"; break;
         12: background := "Soldier"; break;
         13: background := "Urchin"; break;
        default: background := "";
    endcase

    if (res[0] == 1)
        characterAlignmentGump(who);
    else
        SetObjProperty(who, "background", background);
    endif

    return res;
endfunction

program character_creation(who)
    initDictionaries();
    var res := characterRaceGump(who);

    repeat
        while (!isComplete)
            characterAbilitiesGump(who);
        endwhile

        characterAlignmentGump(who);
    until (isComplete);
endprogram
